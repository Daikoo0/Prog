/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eco;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author yoyit
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public int margen;
    public int anchoTablero;
    public int altoTablero;
    public int iconSize;
    public Eco tablero;
    public JLabel[][] etiquetas;
    public Peces[][] peces;
    
    private int cantidadMax;
    private int cantidadAnimal;
    
    private int ancho;
    private int largo;
    private int Orca;
    private int Tiburon;
    private int LoboMarino;
    private int Pulpo;
    private int Salmon;
    private int Krill;
    private int Actualizacion;
    
    private boolean x;
    private int cont;
    
    public Ventana() {
        
        initComponents();
        ImgOrca.setVisible(false);
        ImgTiburon.setVisible(false);
        ImgLoboMarino.setVisible(false);
        ImgPulpo.setVisible(false);
        ImgSalmon.setVisible(false);
        ImgKrill.setVisible(false);
        Piedrita.setVisible(false);
        Awita.setVisible(false);
        
        
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        Orquita = new javax.swing.JTextField();
        Tiburoncito = new javax.swing.JTextField();
        LoboMarinito = new javax.swing.JTextField();
        dimension1 = new javax.swing.JTextField();
        Salmoncito = new javax.swing.JTextField();
        Krillcito = new javax.swing.JTextField();
        xd = new javax.swing.JTextField();
        Pulpito = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ImgOrca = new javax.swing.JLabel();
        ImgTiburon = new javax.swing.JLabel();
        ImgLoboMarino = new javax.swing.JLabel();
        ImgPulpo = new javax.swing.JLabel();
        ImgSalmon = new javax.swing.JLabel();
        ImgKrill = new javax.swing.JLabel();
        Piedrita = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Awita = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Empezar SImulación");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Orquita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrquitaActionPerformed(evt);
            }
        });
        Orquita.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                OrquitaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                OrquitaKeyTyped(evt);
            }
        });

        Tiburoncito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TiburoncitoActionPerformed(evt);
            }
        });
        Tiburoncito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TiburoncitoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TiburoncitoKeyTyped(evt);
            }
        });

        LoboMarinito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoboMarinitoActionPerformed(evt);
            }
        });
        LoboMarinito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                LoboMarinitoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LoboMarinitoKeyTyped(evt);
            }
        });

        dimension1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dimension1ActionPerformed(evt);
            }
        });
        dimension1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dimension1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dimension1KeyTyped(evt);
            }
        });

        Salmoncito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalmoncitoActionPerformed(evt);
            }
        });
        Salmoncito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SalmoncitoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SalmoncitoKeyTyped(evt);
            }
        });

        Krillcito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrillcitoActionPerformed(evt);
            }
        });
        Krillcito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                KrillcitoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                KrillcitoKeyTyped(evt);
            }
        });

        xd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xdActionPerformed(evt);
            }
        });
        xd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                xdKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                xdKeyTyped(evt);
            }
        });

        Pulpito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PulpitoActionPerformed(evt);
            }
        });
        Pulpito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PulpitoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PulpitoKeyTyped(evt);
            }
        });

        jLabel1.setText("Dimensiones");

        jLabel2.setText("Cant. Tiburon");

        jLabel3.setText("Cant. Lobo Marino");

        jLabel4.setText("Cant. Pulpo");

        jLabel5.setText("Cant. Orca");

        jLabel6.setText("Cant. Salmón");

        jLabel8.setText("Cant. Krill");

        jLabel11.setText("actualizaciones del ecosistema");

        ImgOrca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Orca.png"))); // NOI18N

        ImgTiburon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Tiburon.png"))); // NOI18N

        ImgLoboMarino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/LoboMarino.png"))); // NOI18N

        ImgPulpo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Pulpo.png"))); // NOI18N

        ImgSalmon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Salmon.png"))); // NOI18N

        ImgKrill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Krill.png"))); // NOI18N

        Piedrita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Piedra.png"))); // NOI18N

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Mover");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Awita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Awa.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImgOrca, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ImgTiburon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImgLoboMarino, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ImgPulpo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImgSalmon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImgKrill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Piedrita)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Awita)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 482, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tiburoncito, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Pulpito, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Krillcito, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimension1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xd)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LoboMarinito, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Orquita)
                    .addComponent(Salmoncito, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Awita, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Piedrita)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ImgOrca)
                                .addComponent(ImgTiburon)
                                .addComponent(ImgLoboMarino, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ImgPulpo)
                                .addComponent(ImgSalmon)
                                .addComponent(ImgKrill)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimension1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tiburoncito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoboMarinito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pulpito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Salmoncito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Krillcito)
                    .addComponent(Orquita))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(289, 289, 289))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OrquitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrquitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrquitaActionPerformed

    private void TiburoncitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TiburoncitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TiburoncitoActionPerformed

    private void LoboMarinitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoboMarinitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LoboMarinitoActionPerformed

    private void dimension1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dimension1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dimension1ActionPerformed

    private void SalmoncitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalmoncitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalmoncitoActionPerformed

    private void KrillcitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrillcitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KrillcitoActionPerformed

    private void xdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xdActionPerformed

    private void PulpitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PulpitoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PulpitoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        anchoTablero = Integer.parseInt(dimension1.getText());
        altoTablero = anchoTablero;
        cantidadMax = anchoTablero * altoTablero;
        Orca = Integer.parseInt(Orquita.getText());
        Tiburon = Integer.parseInt(Tiburoncito.getText());
        LoboMarino = Integer.parseInt(LoboMarinito.getText());
        Pulpo = Integer.parseInt(Pulpito.getText());
        Salmon = Integer.parseInt(Salmoncito.getText());
        Krill = Integer.parseInt(Krillcito.getText());
        Actualizacion = Integer.parseInt(xd.getText());
        cantidadAnimal = Orca + Tiburon + LoboMarino + Pulpo + Salmon + Krill + 3;

        if (cantidadMax < cantidadAnimal){ 
            getToolkit().beep();
            
            JOptionPane.showMessageDialog(rootPane, "el tamaño del ecosistema es muy pequeño para la cantidad de animales!!\n" + "\npuede tanto aumentar el tamaño del ecosistema como bajar la cantidad de animales");

        }else{
            matriz();          
            jButton1.setEnabled(false);
        }
  

        this.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Validación de Datos //
    
    private void dimension1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dimension1KeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros\n" + "uwu");
        }
        
    }//GEN-LAST:event_dimension1KeyTyped

    private void OrquitaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OrquitaKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_OrquitaKeyTyped

    private void TiburoncitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TiburoncitoKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_TiburoncitoKeyTyped

    private void LoboMarinitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LoboMarinitoKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_LoboMarinitoKeyTyped

    private void PulpitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PulpitoKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_PulpitoKeyTyped

    private void SalmoncitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SalmoncitoKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_SalmoncitoKeyTyped

    private void KrillcitoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KrillcitoKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_KrillcitoKeyTyped

    private void xdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xdKeyTyped
        
        char validar = evt.getKeyChar();
    
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo Numeros");
        }  
        
    }//GEN-LAST:event_xdKeyTyped

    private void dimension1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dimension1KeyReleased
        Validar();
    }//GEN-LAST:event_dimension1KeyReleased

    private void OrquitaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OrquitaKeyReleased
        Validar();
    }//GEN-LAST:event_OrquitaKeyReleased

    private void TiburoncitoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TiburoncitoKeyReleased
        Validar();
    }//GEN-LAST:event_TiburoncitoKeyReleased

    private void LoboMarinitoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LoboMarinitoKeyReleased
        Validar();
    }//GEN-LAST:event_LoboMarinitoKeyReleased

    private void PulpitoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PulpitoKeyReleased
        Validar();
    }//GEN-LAST:event_PulpitoKeyReleased

    private void SalmoncitoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SalmoncitoKeyReleased
        Validar();
    }//GEN-LAST:event_SalmoncitoKeyReleased

    private void KrillcitoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KrillcitoKeyReleased
        Validar();
    }//GEN-LAST:event_KrillcitoKeyReleased

    private void xdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xdKeyReleased
        Validar();
    }//GEN-LAST:event_xdKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
       
        Moverse();
        RecargarMatriz();
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
       
        
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    
    public void matriz(){
        
        margen = 50;
        iconSize = 64;
       
        tablero = new Eco(anchoTablero, altoTablero, Orca, Tiburon, LoboMarino, Pulpo, Salmon, Krill);
        etiquetas = new JLabel[anchoTablero][altoTablero];
        
        this.peces = new Peces[anchoTablero][altoTablero];
        
        for (int i = 0; i < anchoTablero; i++) {
            for (int j = 0; j < altoTablero; j++) {
                
                etiquetas[i][j] = new JLabel(Integer.toString(tablero.GetValue(i, j)));        
                etiquetas[i][j].setSize(iconSize, iconSize);
                etiquetas[i][j].setLocation(margen + i*iconSize, margen + j*iconSize);
                
                if (etiquetas[i][j].getText().equals("6")) {
                    etiquetas[i][j].setIcon(ImgOrca.getIcon());
                    peces[i][j] = new Orca();
                } else if (etiquetas[i][j].getText().equals("5")) {
                    etiquetas[i][j].setIcon(ImgTiburon.getIcon());
                    peces[i][j] = new Tiburon();
                } else if (etiquetas[i][j].getText().equals("4")) {
                    etiquetas[i][j].setIcon(ImgLoboMarino.getIcon());
                    peces[i][j] = new LoboMarino();
                } else if (etiquetas[i][j].getText().equals("3")) {
                    etiquetas[i][j].setIcon(ImgPulpo.getIcon());
                    peces[i][j] = new Pulpo();
                } else if (etiquetas[i][j].getText().equals("2")) {
                    etiquetas[i][j].setIcon(ImgSalmon.getIcon());
                    peces[i][j] = new Salmon();
                } else if (etiquetas[i][j].getText().equals("1")) {
                    etiquetas[i][j].setIcon(ImgKrill.getIcon());
                    peces[i][j] = new Krill();
                } else if (etiquetas[i][j].getText().equals("0")) {
                    etiquetas[i][j].setIcon(Awita.getIcon());
                    peces[i][j] = new Awa();
                } else if (etiquetas[i][j].getText().equals("7")) {
                    etiquetas[i][j].setIcon(Piedrita.getIcon());
                    peces[i][j] = new Piedra();
                }
                
                etiquetas[i][j].setText("");
               
                this.add(etiquetas[i][j]);
                
                etiquetas[i][j].setVisible(true);
            }
        }
        
        for (int i = 0; i < anchoTablero; i++) {
            for (int j = 0; j < altoTablero; j++) {
                
                int animalxd;
                
                animalxd = peces[i][j].GetDepredar();
                System.out.println(animalxd); 
                
                if(animalxd == 5){
                    System.out.println("Tiburon de Pana"); 
                }
            }
        }
        
        
        this.repaint();
            
    }
    
    public void Validar(){
        
        if(dimension1.getText().isEmpty() || Tiburoncito.getText().isEmpty() || Salmoncito.getText().isEmpty() || 
                Pulpito.getText().isEmpty() || Orquita.getText().isEmpty() || LoboMarinito.getText().isEmpty() || Krillcito.getText().isEmpty() || xd.getText().isEmpty()){
            
            jButton1.setEnabled(false);
            
        }else{
            
            jButton1.setEnabled(true);
            
        }
    }
    
    public void RecargarMatriz(){
        
        for (int i = 0; i < anchoTablero; i++) {
            for (int j = 0; j < altoTablero; j++) {
                
                //ELIMINA LAS IMG DE LA POSICION ACTUAL
                etiquetas[i][j].setIcon(null);
                
                String NombrePez = peces[i][j].GetNombre();
                  
                //DEPENDIENDO DEL ANIMAL QUE ESTE EN LA MATRIZ DE PECES SE LE AÑADE LA IMG CORRESPONDIENTE
                if(NombrePez == "Orca") {
                    etiquetas[i][j].setIcon(ImgOrca.getIcon());
                    
                } else if (NombrePez == "Tiburon") {
                    etiquetas[i][j].setIcon(ImgTiburon.getIcon());
                    
                } else if (NombrePez == "LoboMarino") {
                    etiquetas[i][j].setIcon(ImgLoboMarino.getIcon());
                    
                } else if (NombrePez == "Pulpo") {
                    etiquetas[i][j].setIcon(ImgPulpo.getIcon());
                    
                } else if (NombrePez == "Salmon") {
                    etiquetas[i][j].setIcon(ImgSalmon.getIcon());
                    
                } else if (NombrePez == "Krill") {
                    etiquetas[i][j].setIcon(ImgKrill.getIcon());
                    
                } else if (NombrePez == "Piedra") {
                    etiquetas[i][j].setIcon(Piedrita.getIcon());
                    
                } else if (NombrePez == "Awa"){
                    etiquetas[i][j].setIcon(Awita.getIcon());
                }
                
                etiquetas[i][j].setText("");
               
                this.add(etiquetas[i][j]);
                
                etiquetas[i][j].setVisible(true);
                
                this.repaint();
            }
        }
        
        //PARA ACTUALIZAR EL PANEL 
        this.repaint();
    }
    
    public void Moverse(){
        Random modnar = new Random();
        
        for(int k = 0; k < anchoTablero; k++){
            for(int l = 0; l < altoTablero; l++){
                
                int khacer = modnar.nextInt(101);
                Peces temp;
                
                int x = 0;
                int y = 0;
                
                x = modnar.nextInt(anchoTablero);
                y = modnar.nextInt(altoTablero);
                
                
                int animalAct = peces[x][y].GetDepredar();
                 
                
                if(khacer > 0 && khacer < 45){
                    //MOVERSE EN EL EJE X
              
                    //SI ESTA EN EL LATERAL IZQUIERDO
                    if(y == 0){
                        
                        int animal2 = peces[x][y+1].GetDepredar();
                        
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6 ){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            //SI SE PUEDE COMER AL ANIMAL
                            if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal2 && animal2 != 0){
                                
                                Almorzar(x,y);
                                                                
                            }
                            
                            if(animal2 == 0){
                                
                                peces[x][y].DarHambre();
                                peces[x][y].VidaA();
                                System.out.println(peces[x][y].GetNombre()+" IZQUIERDA Se movio X");
                                temp = peces[x][y+1];
                                peces[x][y+1] = peces[x][y];
                                peces[x][y] = temp;
                                                               
                            }
                        }
                        
                    //SI ESTA EN EL LATERAL DERECHO    
                    }else if(y == anchoTablero -1){
                        int animal1 = peces[x][y-1].GetDepredar();
                    
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            //SI SE PUEDE COMER AL ANIMAL
                            if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal1 && animal1 != 0){
                                
                                Almorzar(x,y);
                                                                
                            }
                            
                            if(animal1 == 0){
                                
                                peces[x][y].DarHambre();
                                peces[x][y].VidaA();
                                System.out.println(peces[x][y].GetNombre()+" DERECHA Se movio X");
                                temp = peces[x][y-1];
                                peces[x][y-1] = peces[x][y];
                                peces[x][y] = temp;
                                
                            }
                        }    
                                  
                    //SI ESTA EN MEDIO
                    }else{
                        int animal1 = peces[x][y-1].GetDepredar();
                        int animal2 = peces[x][y+1].GetDepredar();
                        
                        int xd = modnar.nextInt(2);
                        
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            if(xd == 0){
                                
                                if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal2 && animal2 != 0){
                                    
                                    Almorzar3(x, y, xd);
                                                                
                                }   
                                
                                if(animal2 == 0){
                                    
                                    peces[x][y].DarHambre();
                                    peces[x][y].VidaA();
                                    System.out.println(peces[x][y].GetNombre()+" AMBOS LADOS LIBRES Se movio X");
                                    temp = peces[x][y+1];
                                    peces[x][y+1] = peces[x][y];
                                    peces[x][y] = temp;

                                }    
                            }

                            else if(xd == 1){
                                
                                //SI SE PUEDE COMER AL ANIMAL
                                if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal1 && animal1 != 0){
                                    
                                    Almorzar3(x, y, xd);

                                }
                                
                                if(animal1 == 0){
                                    
                                    peces[x][y].DarHambre();
                                    peces[x][y].VidaA();
                                    System.out.println(peces[x][y].GetNombre()+" AMBOS LADOS LIBRES Se movio X");
                                    temp = peces[x][y-1];
                                    peces[x][y-1] = peces[x][y];
                                    peces[x][y] = temp; 

                                }    
                            }
                        }
                    }   
                }else if(khacer >= 45 && khacer < 90){
                    //SE MUEVE EN EL EJE Y
                    
                    //SI ESTA EN LA CIMA
                    if(x == 0){
                        
                        int animal2 = peces[x+1][y].GetDepredar();
                        
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            //SI SE PUEDE COMER AL ANIMAL
                            if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal2 && animal2 != 0){
                                
                                Almorzar2(x,y);

                            }
                            
                            if(animal2 == 0){
                                
                                peces[x][y].DarHambre();
                                peces[x][y].VidaA();
                                System.out.println(peces[x][y].GetNombre()+" ARRIBA Se movio Y");
                                temp = peces[x+1][y];
                                peces[x+1][y] = peces[x][y];
                                peces[x][y] = temp;
                                
                                
                            }
                        }
                        
                    //SI ESTA ABAJO  
                    }else if(x == altoTablero -1){
                        int animal1 = peces[x-1][y].GetDepredar();
                    
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            //SI SE PUEDE COMER AL ANIMAL
                            if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal1 && animal1 != 0){
                                
                                Almorzar2(x,y);
                                                                
                            }
                            
                            if(animal1 == 0){
                                
                                peces[x][y].DarHambre();
                                peces[x][y].VidaA();
                                System.out.println(peces[x][y].GetNombre()+" ABAJO Se movio Y");
                                temp = peces[x-1][y];
                                peces[x-1][y] = peces[x][y];
                                peces[x][y] = temp;
    
                            }
                        }    
                                  
                    //SI ESTA EN MEDIO
                    }else{
                        int animal1 = peces[x-1][y].GetDepredar();
                        int animal2 = peces[x+1][y].GetDepredar();
                        
                        int xd = modnar.nextInt(2);
                        
                        if(animalAct == 1 || animalAct == 2 || animalAct == 3 || animalAct == 4 || animalAct == 5 || animalAct == 6){
                            
                            if(peces[x][y].GetVidaAct() >= peces[x][y].GetEsperanzaVida()){
                            
                                System.out.println(peces[x][y].GetNombre()+" Murio de Viejo");
                                peces[x][y] = new Awa();

                            }
                            
                            //Si se llega a morir de Hambre
                            if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                                //Se Muere un Pescao
                                System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                                peces[x][y] = new Awa();

                            }
                            
                            if(xd == 0){
                                
                                //SI SE PUEDE COMER AL ANIMAL
                                if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal2 && animal2 !=0){
                                    
                                    Almorzar4(x, y, xd);
   
                                }
                                
                                if(animal2 == 0){
                                    
                                    peces[x][y].DarHambre();
                                    peces[x][y].VidaA();
                                    System.out.println(peces[x][y].GetNombre()+" AMOBOS LADOS LIBRES Se movio Y");
                                    temp = peces[x+1][y];
                                    peces[x+1][y] = peces[x][y];
                                    peces[x][y] = temp;

                                }  
                            }

                            else if(xd == 1){
                                
                                //SI SE PUEDE COMER AL ANIMAL
                                if(peces[x][y].GetAlimentacionMin() <= peces[x][y].GetHambreAct() && animalAct > animal1 && animal1 !=0){
                                    
                                    Almorzar4(x, y, xd);

                                }
                                
                                if(animal1 == 0){
                                    
                                    peces[x][y].DarHambre();
                                    peces[x][y].VidaA();
                                    System.out.println(peces[x][y].GetNombre()+" AMBOS LADOS LIBRES Se movio X");
                                    temp = peces[x-1][y];
                                    peces[x-1][y] = peces[x][y];
                                    peces[x][y] = temp;


                                }    
                            } 
                            
                        }
                    }
                }else if (khacer >= 90 && khacer <= 100){
                    //No se Mueve
                    
                    //Si se llega a morir de Hambre
                    if(peces[x][y].GetAlimentacionMax() <= peces[x][y].GetHambreAct()  ){
                    
                        //Se Muere un Pescao
                        System.out.println(peces[x][y].GetNombre()+" Se murio de Hambre");
                        peces[x][y] = new Awa();

                    }
                    
                    System.out.println(peces[x][y].GetNombre()+" NO SE MOVIO ALTA PAJA");
                }  
                
                
                
            }
        }
        
        System.out.println("////////////////////////////////////");
        this.repaint();
         
    }
     
    public void Almorzar(int x, int y){
        
        //LATERAL IZQUIERDO
        if(y == 0){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x][y+1].GetNombre());
            peces[x][y].RestHambre();
            peces[x][y+1] = peces[x][y];
            peces[x][y] = new Awa();

        //LATERAL DERECHO    
        }else if(y == anchoTablero-1){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x][y-1].GetNombre());
            peces[x][y].RestHambre();
            peces[x][y-1] = peces[x][y];
            peces[x][y] = new Awa();
            Reproducir();
        }
    }
    
    public void Almorzar2(int x, int y){
        
        //SUPERIOR EN CIMA
	if(x == 0){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x+1][y].GetNombre());
            peces[x][y].RestHambre();
            peces[x+1][y] = peces[x][y];
            peces[x][y] = new Awa();
	
	//INFERIOR ABAJO
        }else if(x == altoTablero-1){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x-1][y].GetNombre());
            peces[x][y].RestHambre();
            peces[x-1][y] = peces[x][y];
            peces[x][y] = new Awa();
        }
        
    }
    
    public void Almorzar3(int x, int y, int xd){
 
	//HORIZONTAL DERECHA	
        if(xd == 0){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x][y+1].GetNombre());
            peces[x][y].RestHambre();
            peces[x][y+1] = peces[x][y];
            peces[x][y] = new Awa();

        //HORIZONTAL IZQUIERDA
        }else if( xd == 1){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x][y-1].GetNombre());
            peces[x][y].RestHambre();
            peces[x][y-1] = peces[x][y];
            peces[x][y] = new Awa();
        }        
    } 
    
    public void Almorzar4(int x, int y, int xd){
        
        //Vertical Arriba
        if(xd == 0){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x+1][y].GetNombre());
            peces[x][y].RestHambre();
            peces[x+1][y] = peces[x][y];
            peces[x][y] = new Awa();

	//VERTICAL ABAJO
        }else if( xd == 1){
            System.out.println(peces[x][y].GetNombre()+" Se almorzo a "+peces[x-1][y].GetNombre());
            peces[x][y].RestHambre();
            peces[x-1][y] = peces[x][y];
            peces[x][y] = new Awa();
        }  
    }
        

    
    public void Funcion(){
        //boolean si = true; 
        int cont = 0;
        boolean x = true;
        
        while(x = true){
            cont++;
            System.out.println("Mueve la matriz");
            Moverse();
            this.repaint();
            System.out.println("Termina de mover la matriz");
            
            x = false;
            
            System.out.println("Termina el programa");
            
            if(cont == Actualizacion){
                
                System.out.println("Actualizo la matriz");
                RecargarMatriz();
                this.repaint();
                cont = 0;
                System.out.println("Termino de Actualizar");
                
            }

            try {

             Thread.sleep(2000);

            } catch (InterruptedException e) {

            }
            
            
            
        }
                
    }
    public void Reproducir(){
        if(peces[x][y].GetReproduccionAct() >= peces[x][y].GetReproduccion() ){
        
        }
           
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Awita;
    private javax.swing.JLabel ImgKrill;
    private javax.swing.JLabel ImgLoboMarino;
    private javax.swing.JLabel ImgOrca;
    private javax.swing.JLabel ImgPulpo;
    private javax.swing.JLabel ImgSalmon;
    private javax.swing.JLabel ImgTiburon;
    private javax.swing.JTextField Krillcito;
    private javax.swing.JTextField LoboMarinito;
    private javax.swing.JTextField Orquita;
    private javax.swing.JLabel Piedrita;
    private javax.swing.JTextField Pulpito;
    private javax.swing.JTextField Salmoncito;
    private javax.swing.JTextField Tiburoncito;
    private javax.swing.JTextField dimension1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField xd;
    // End of variables declaration//GEN-END:variables
}
